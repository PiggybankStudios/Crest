{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
				"build_script.c",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
		{
			"name": "Tracy",
			"path": "core/third_party/tracy",
			"file_exclude_patterns": [
				"LICENSE",
				"*.F90",
				"*.hmm",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"BUILD_WITH_HTTP",
			"CL_WARNING_NAMED_TYPEDEF_IN_PARENTHESES",
			"COPY_TO_DATA_DIRECTORY",
			"HTTP_DEFAULT_USER_AGENT_STR",
			"HTTP_DEFAULT_USER_AGENT_WIDE_STR",
			"HttpRequestState_Cancelled",
			"HttpRequestState_Count",
			"HttpRequestState_Failure",
			"HttpRequestState_InProgress",
			"HttpRequestState_None",
			"HttpRequestState_NotStarted",
			"HttpRequestState_Success",
			"HttpVerb_Count",
			"HttpVerb_DELETE",
			"HttpVerb_GET",
			"HttpVerb_None",
			"HttpVerb_POST",
			"MimeType_Count",
			"MimeType_FormUrlEncoded",
			"MimeType_None",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"RangeIXX_Zero",
			"RangeIXX_Zero_Const",
			"RangeR32_Zero",
			"RangeR32_Zero_Const",
			"RangeR64_Zero",
			"RangeR64_Zero_Const",
			"RangeUXX_Zero",
			"RangeUXX_Zero_Const",
			"ResultTab_Count",
			"ResultTab_Image",
			"ResultTab_JSON",
			"ResultTab_Meta",
			"ResultTab_None",
			"ResultTab_Raw",
			"Result_FailedToOpenRequest",
			"Result_SslProblem",
			"Result_WinHTTPError",
			"TARGET_HAS_THREADING",
			"TIMEOUT_FOREVER",
		],
		"custom_functions":
		[
			"#define AlignOffset(pntr, alignment)",
			"#define AllocArray(type, arenaPntr, count)",
			"#define AllocType(type, arenaPntr)",
			"#define Billion(value)",
			"#define BufferPrintAt(level, arrayBuffer, formatString, ...)",
			"#define BufferPrintLineAt(level, arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_D(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_E(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_I(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_N(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_O(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_R(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_W(arrayBuffer, formatString, ...)",
			"#define BufferPrint_D(arrayBuffer, formatString, ...)",
			"#define BufferPrint_E(arrayBuffer, formatString, ...)",
			"#define BufferPrint_I(arrayBuffer, formatString, ...)",
			"#define BufferPrint_N(arrayBuffer, formatString, ...)",
			"#define BufferPrint_O(arrayBuffer, formatString, ...)",
			"#define BufferPrint_R(arrayBuffer, formatString, ...)",
			"#define BufferPrint_W(arrayBuffer, formatString, ...)",
			"#define CreateTwoPassInnerArena(twoPassStrPntr, arenaPntrName)",
			"#define DeferBlock(endCode)",
			"#define DeferBlockChecked(startCodeAndCondition, endCode)",
			"#define DeferBlockCheckedEx(uniqueName, startCodeAndCondition, endCode)",
			"#define DeferBlockEx(uniqueName, endCode)",
			"#define DeferBlockWithStart(startCode, endCode)",
			"#define DeferBlockWithStartEx(uniqueName, startCode, endCode)",
			"#define DeferIfBlock(startCodeAndCondition, endCode)",
			"#define DeferIfBlockCondEnd(startCodeAndCondition, endCode)",
			"#define DeferIfBlockCondEndEx(uniqueName, startCodeAndCondition, endCode)",
			"#define DeferIfBlockEx(uniqueName, startCodeAndCondition, endCode)",
			"#define FreeArray(type, arenaPntr, count, allocPntr)",
			"#define FreeType(type, arenaPntr, allocPntr)",
			"#define Giga(value)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define IsAlignedTo(pntr, alignment)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define IsSliceFromStr(str, slice)",
			"#define Kilo(value)",
			"#define LockMutexBlock(mutexPntr, timeout)",
			"#define LockMutexBlockWithTracyZone(zoneName, zoneDisplayStr, mutexPntr, timeout)",
			"#define Mega(value)",
			"#define Million(value)",
			"#define PrintAt(level, formatString, ...)",
			"#define PrintLineAt(level, formatString, ...)",
			"#define PrintLine_D(formatString, ...)",
			"#define PrintLine_E(formatString, ...)",
			"#define PrintLine_I(formatString, ...)",
			"#define PrintLine_N(formatString, ...)",
			"#define PrintLine_O(formatString, ...)",
			"#define PrintLine_R(formatString, ...)",
			"#define PrintLine_W(formatString, ...)",
			"#define Print_D(formatString, ...)",
			"#define Print_E(formatString, ...)",
			"#define Print_I(formatString, ...)",
			"#define Print_N(formatString, ...)",
			"#define Print_O(formatString, ...)",
			"#define Print_R(formatString, ...)",
			"#define Print_W(formatString, ...)",
			"#define Tera(value)",
			"#define Thousand(value)",
			"#define Trillion(value)",
			"#define TwoPassBytes(twoPassStrPntr, numBytes, bytesPntr)",
			"#define TwoPassChar(twoPassStrPntr, character)",
			"#define TwoPassStr(twoPassStrPntr, str8)",
			"#define TwoPassStr8Loop(structName, arenaPntr, addNullTerm)",
			"#define TwoPassStr8LoopEnd(twoPassStrPntr)",
			"#define TwoPassStrNt(twoPassStrPntr, nullTermStr)",
			"#define VarArrayGetIndexOf(type, arrayPntr, itemInQuestion, indexOut)",
			"#define WriteAt(level, message)",
			"#define WriteLineAt(level, message)",
			"#define WriteLine_D(message)",
			"#define WriteLine_E(message)",
			"#define WriteLine_I(message)",
			"#define WriteLine_N(message)",
			"#define WriteLine_O(message)",
			"#define WriteLine_R(message)",
			"#define WriteLine_W(message)",
			"#define Write_D(message)",
			"#define Write_E(message)",
			"#define Write_I(message)",
			"#define Write_N(message)",
			"#define Write_O(message)",
			"#define Write_R(message)",
			"#define Write_W(message)",
			"ClayId ToClayId(Str8 idStr)",
			"ClayId ToClayIdEx(Str8 idStr, uxx index)",
			"ClayId ToClayIdNt(const char* idNullTermString)",
			"ClayId ToClayIdPrint(Arena* arena, const char* formatString, ...)",
			"ClayId ToClayIdPrintEx(Arena* arena, uxx index, const char* formatString, ...)",
			"Clay_RenderCommandArray EndClayUIRender(ClayUI* clay)",
			"FontAtlas* GetFontAtlas(PigFont* font, r32 fontSize, u8 styleFlags)",
			"HttpConnection* OsFindHttpConnection(HttpRequestManager* manager, Str8 hostname, u16 portNumber)",
			"HttpRequest* OsMakeHttpRequest(HttpRequestManager* manager, const HttpRequestArgs* args, u64 programTime)",
			"PEXPI void FreeUiLargeText(UiLargeText* text)",
			"PEXPI void FreeUiLargeTextView(UiLargeTextView* tview)",
			"RangeIXX BothRangeIXX(RangeIXX range1, RangeIXX range2)",
			"RangeIXX ClampAboveRangeIXX(RangeIXX range, ixx minValue)",
			"RangeIXX ClampBelowRangeIXX(RangeIXX range, ixx maxValue)",
			"RangeIXX FillRangeIXX(ixx value)",
			"RangeIXX NewRangeIXX(ixx value1, ixx value2)",
			"RangeIXX NewRangeIXXLength(ixx start, ixx length)",
			"RangeIXX OverlapPartRangeIXX(RangeIXX range1, RangeIXX range2)",
			"RangeR32 BothRangeR32(RangeR32 range1, RangeR32 range2)",
			"RangeR32 ClampAboveRangeR32(RangeR32 range, r32 minValue)",
			"RangeR32 ClampBelowRangeR32(RangeR32 range, r32 maxValue)",
			"RangeR32 FillRangeR32(r32 value)",
			"RangeR32 NewRangeR32(r32 value1, r32 value2)",
			"RangeR32 NewRangeR32Length(r32 start, r32 length)",
			"RangeR32 OverlapPartRangeR32(RangeR32 range1, RangeR32 range2)",
			"RangeR64 BothRangeR64(RangeR64 range1, RangeR64 range2)",
			"RangeR64 ClampAboveRangeR64(RangeR64 range, r64 minValue)",
			"RangeR64 ClampBelowRangeR64(RangeR64 range, r64 maxValue)",
			"RangeR64 FillRangeR64(r64 value)",
			"RangeR64 NewRangeR64(r64 value1, r64 value2)",
			"RangeR64 NewRangeR64Length(r64 start, r64 length)",
			"RangeR64 OverlapPartRangeR64(RangeR64 range1, RangeR64 range2)",
			"RangeUXX BothRangeUXX(RangeUXX range1, RangeUXX range2)",
			"RangeUXX ClampAboveRangeUXX(RangeUXX range, uxx minValue)",
			"RangeUXX ClampBelowRangeUXX(RangeUXX range, uxx maxValue)",
			"RangeUXX FillRangeUXX(uxx value)",
			"RangeUXX NewRangeUXX(uxx value1, uxx value2)",
			"RangeUXX NewRangeUXXLength(uxx start, uxx length)",
			"RangeUXX OverlapPartRangeUXX(RangeUXX range1, RangeUXX range2)",
			"RangeUXX SliceToRangeUXX(Str8 str, Str8 slice)",
			"Result OsDoSaveFileDialog(uxx numExtensions, Str8Pair* extensions, uxx defaultExtensionIndex, Arena* arena, FilePath* pathOut)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"Str16 ConvertUtf8StrToUcs2(Arena* arena, Str8 utf8Str, bool addNullTerm)",
			"Str8 ConvertUcs2StrToUtf8(Arena* arena, Str16 usc2Str, bool addNullTerm)",
			"Str8 EncodeHttpHeaders(Arena* arena, uxx numHeaders, const Str8Pair* headers, bool addNullTerm)",
			"Str8 EncodeHttpKeyValuePairContent(Arena* arena, uxx numItems, const Str8Pair* contentItems, MimeType encoding, bool addNullTerm)",
			"Str8 EscapeStr_FormUrlEncoding(Arena* arena, Str8 str, bool addNullTerm)",
			"Str8 EscapeUrlArgumentStr(Arena* arena, Str8 key, Str8 value, bool encodeSpacesAsPlus, bool addNullTerm)",
			"Str8 GetUriAnchorPart(Str8 uriStr)",
			"Str8 GetUriHostnamePart(Str8 uriStr)",
			"Str8 GetUriParametersPart(Str8 uriStr)",
			"Str8 GetUriPathPart(Str8 uriStr)",
			"Str8 GetUriProtocolPart(Str8 uriStr)",
			"Str8 PrintInArenaStr(Arena* arena, const char* formatString, ...)",
			"Str8 ShortenFilePathToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, FilePath filePath, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextEndToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextStartToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr, uxx ellipsesIndex)",
			"Str8 StrSliceFromPntr(Str8 target, void* startPntr)",
			"Str8 StrSlicePntrs(Str8 target, const void* startPntr, const void* endPntr)",
			"Str8 StrSliceRange(Str8 str, RangeUXX range)",
			"Str8 ToStr8FromRange(StrRange strRange)",
			"StrRange ToStrRange(Str8 str, Str8 slice)",
			"TextMeasure MeasureRichText(const PigFont* font, r32 wrapWidth, RichStr text)",
			"TextMeasure MeasureRichTextEx(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, RichStr text)",
			"TextMeasure MeasureRichTextFlow(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, RichStr text, FontFlow* flowOut)",
			"TextMeasure MeasureText(const PigFont* font, r32 wrapWidth, Str8 text)",
			"TextMeasure MeasureTextEx(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, Str8 text)",
			"TextMeasure MeasureTextFlow(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, Str8 text, FontFlow* flowOut)",
			"ThreadId OsGetCurrentThreadId()",
			"TwoPassStr8 NewTwoPassStr8(Arena* arena, bool addNullTerm)",
			"UriParts GetUriParts(Str8 uriStr)",
			"bool AreCharsHexidecimal(u64 numChars, char* charsPntr)",
			"bool AreEqualRangeIXX(RangeIXX left, RangeIXX right)",
			"bool AreEqualRangeR32(RangeR32 left, RangeR32 right)",
			"bool AreEqualRangeR64(RangeR64 left, RangeR64 right)",
			"bool AreEqualRangeUXX(RangeUXX left, RangeUXX right)",
			"bool AreSimilarRangeR32(RangeR32 left, RangeR32 right, r32 tolerance)",
			"bool AreSimilarRangeR64(RangeR64 left, RangeR64 right, r64 tolerance)",
			"bool ClayBtnStrEx(Str8 idStr, Str8 btnText, Str8 hotkeyStr, bool isEnabled, bool growWidth, Texture* icon)",
			"bool DoesOverlapRangeIXX(RangeIXX left, RangeIXX right, bool inclusive)",
			"bool DoesOverlapRangeR32(RangeR32 left, RangeR32 right, bool inclusive)",
			"bool DoesOverlapRangeR64(RangeR64 left, RangeR64 right, bool inclusive)",
			"bool DoesOverlapRangeUXX(RangeUXX left, RangeUXX right, bool inclusive)",
			"bool DoesStrContainMultibyteUtf8Chars(Str8 str)",
			"bool FindNextWhitespaceInStr(Str8 target, uxx startIndex)",
			"bool IsCharAlphaNumeric(u32 codepoint)",
			"bool IsCharAlphabetic(u32 codepoint)",
			"bool IsCharAnsii(u32 codepoint)",
			"bool IsCharExtendedAnsii(u32 codepoint)",
			"bool IsCharHexadecimal(u32 codepoint)",
			"bool IsCharLowercaseAlphabet(u32 codepoint)",
			"bool IsCharNumeric(u32 codepoint)",
			"bool IsCharPunctuationEnd(u32 codepoint)",
			"bool IsCharPunctuationStart(u32 codepoint)",
			"bool IsCharRenderableAnsii(u32 codepoint)",
			"bool IsCharSlash(u32 codepoint)",
			"bool IsCharSyntax(u32 codepoint)",
			"bool IsCharUppercaseAlphabet(u32 codepoint)",
			"bool IsCharWhitespace(u32 codepoint, bool includeNewLines)",
			"bool IsValidIdentifier(uxx strLength, const char* strPntr, bool allowEmpty, bool allowDashes, bool allowSpaces)",
			"bool LockMutex(Mutex* mutexPntr, uxx timeoutMs)",
			"bool LockMutexAndEndTracyZone(Mutex* mutexPntr, uxx timeoutMs, TracyCZoneCtx zone)",
			"bool OsIsMainThread()",
			"bool UpdateClayScrolling(ClayUI* clay, r32 elapsedMs, bool isMouseOverOther, v2 mouseScrollDelta, bool allowTouchScrolling)",
			"char GetHexChar(u8 hexValue, bool upperCase)",
			"char ToLowerChar(char c)",
			"char ToUpperChar(char c)",
			"char* PrintInArena(Arena* arena, const char* formatString, ...)",
			"const char* GetHttpRequestStateStr(HttpRequestState enumValue)",
			"const char* GetHttpVerbStr(HttpVerb enumValue)",
			"const char* GetMimeTypeStr(MimeType enumValue)",
			"const char* GetResultTabStr(ResultTab enumValue)",
			"const char* GetWinHttpErrorStr(DWORD errorCode)",
			"const char* GetWinHttpStatusStr(DWORD status)",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"rec GetClayElementDrawRec(ClayId elementId)",
			"rec GetClayElementDrawRecNt(const char* elementIdStrNt)",
			"rec GetClayElementDrawRecStr(Str8 elementIdStr)",
			"u32 CLAY_HASH_TEXT_USERDATA_DEF(u32 currentHash, Clay_TextElementConfig* config)",
			"u32 CharToU32(char c)",
			"u32 HashTextUserData(u32 currentHash, Clay_TextElementConfig* config)",
			"u8 CharToU8(char c)",
			"u8 GetCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"u8 GetHexCharValue(char hexChar)",
			"u8 GetLowerNibble(u8 value)",
			"u8 GetNumericCharValue(char hexChar)",
			"u8 GetPrevCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"u8 GetUpperNibble(u8 value)",
			"uxx FindNextCharInStr(Str8 target, uxx startIndex, Str8 searchCharsStr)",
			"uxx FindNextCharInStrEx(Str8 target, uxx startIndex, Str8 searchCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextUnknownCharInStr(Str8 target, uxx startIndex, Str8 knownCharsStr)",
			"uxx FindNextUnknownCharInStrEx(Str8 target, uxx startIndex, Str8 knownCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextWhitespaceInStrEx(Str8 target, uxx startIndex, bool ignoreCharsInQuotes)",
			"uxx FindWordBoundaryStr(Str8 str, uxx startIndex, bool forward)",
			"uxx ShortenTextToFitWidthEx(const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr, uxx ellipsesIndex, Str8* beforeEllipseStrOut, Str8* afterEllipseStrOut)",
			"uxx UiTextboxFindClosestIndexToPos(UiTextbox* tbox, v2 screenPos)",
			"void BeginClayUIRender(ClayUI* clay, v2 windowSize, bool isMouseOverOther, v2 mousePos, bool isMouseDown)",
			"void DEBUG_OUTPUT_HANDLER_DEF(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel level, bool newLine, const char* message)",
			"void DEBUG_PRINT_HANDLER_DEF(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel level, bool newLine, uxx printBufferLength, char* printBuffer, const char* formatString, ...)",
			"void DestroyMutex(Mutex* mutexPntr)",
			"void DoUiCheckbox(Str8 idStr, bool* isChecked, ClayUIRenderer* renderer, Arena* uiArena, MouseState* mouse, r32 uiScale, r32 boxSize, Texture* checkboxTexture, Str8 label, Dir2 labelSide, PigFont* font, r32 fontSize, u8 fontStyle)",
			"void DoUiLargeTextView(UiLargeTextView* tview, ClayUIRenderer* renderer, Arena* uiArena, KeyboardState* keyboard, MouseState* mouse, r32 uiScale, Clay_SizingAxis viewWidth, Clay_SizingAxis viewHeight, UiLargeText* text, PigFont* font, r32 fontSize, u8 fontStyle)",
			"void DoUiListView(UiListView* list, ClayUIRenderer* renderer, Arena* uiArena, KeyboardState* keyboard, MouseState* mouse, r32 uiScale, Clay_SizingAxis listWidth, Clay_SizingAxis listHeight, u16 itemGap, uxx numItems, UiListViewItem* items)",
			"void DoUiTextbox(UiTextbox* tbox, ClayUIRenderer* renderer, Arena* uiArena, const KeyboardState* keyboard, const MouseState* mouse, UiTextbox** focusedTextbox, PigFont* font, u8 fontStyle, r32 fontSize, r32 uiScale)",
			"void FreeHttpRequestManager(HttpRequestManager* manager)",
			"void FreeUiTextbox(UiTextbox* tbox)",
			"void HTTP_CALLBACK_DEF(plex HttpRequest* request)",
			"void InitClayUI(Arena* arena, v2 windowSize, ClayMeasureText_f* measureTextFunc, void* measureUserData, ClayUI* clayOut)",
			"void InitMutex(Mutex* mutexPntr)",
			"void InitUiLargeText(Arena* arena, Str8 textStr, UiLargeText* text)",
			"void InitUiLargeTextView(Arena* arena, Str8 idStr, UiLargeTextView* tview)",
			"void InitUiTextbox(Arena* arena, Str8 idStr, Str8 initialText, UiTextbox* tbox)",
			"void OsCopyHttpRequestArgs(Arena* arena, HttpRequestArgs* dest, const HttpRequestArgs* source)",
			"void OsFreeHttpRequestManager(HttpRequestManager* manager)",
			"void OsInitHttpRequestManager(Arena* arena, HttpRequestManager* manager)",
			"void OsUpdateHttpRequestManager(HttpRequestManager* manager)",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void ResetFontFlowInfo(FontFlow* flow)",
			"void SetClayContext(ClayUI* clay)",
			"void TwoPassPrint(TwoPassStr8* twoPassStrPntr, const char* formatString, ...)",
			"void UiTextboxDeleteBytes(UiTextbox* tbox, uxx startIndex, uxx numBytes)",
			"void UiTextboxDeleteSelected(UiTextbox* tbox)",
			"void UiTextboxSelectAll(UiTextbox* tbox)",
			"void UnlockMutex(Mutex* mutexPntr)",
			"void WinHttpStatusCallback(HINTERNET handle, DWORD_PTR context, DWORD status, LPVOID infoPntr, DWORD infoLength)",
			"void* ReallocMemAligned(Arena* arena, void* allocPntr, uxx oldSize, uxx oldAlignmentOverride, uxx newSize, uxx newAlignmentOverride)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"ClayHashTextUserData_f",
			"DebugOutput_f",
			"DebugPrint_f",
			"HistoryItem",
			"HttpCallback_f",
			"HttpConnection",
			"HttpRequestArgs",
			"HttpRequestManager",
			"HttpRequestState",
			"HttpVerb",
			"MimeType",
			"Mutex",
			"OsDll",
			"RangeUXX",
			"ResultTab",
			"StrRange",
			"TwoPassStr8",
			"UiCheckbox",
			"UiLargeText",
			"UiLargeTextLine",
			"UiLargeTextView",
		],
	},
}
