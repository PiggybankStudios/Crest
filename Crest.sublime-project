{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
				"build_script.c",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
		{
			"name": "Tracy",
			"path": "core/third_party/tracy",
			"file_exclude_patterns": [
				"LICENSE",
				"*.F90",
				"*.hmm",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"BUILD_WITH_HTTP",
			"CL_WARNING_NAMED_TYPEDEF_IN_PARENTHESES",
			"COPY_TO_DATA_DIRECTORY",
			"HTTP_DEFAULT_USER_AGENT_STR",
			"HTTP_DEFAULT_USER_AGENT_WIDE_STR",
			"HttpRequestState_Cancelled",
			"HttpRequestState_Count",
			"HttpRequestState_Failure",
			"HttpRequestState_InProgress",
			"HttpRequestState_None",
			"HttpRequestState_NotStarted",
			"HttpRequestState_Success",
			"HttpVerb_Count",
			"HttpVerb_DELETE",
			"HttpVerb_GET",
			"HttpVerb_None",
			"HttpVerb_POST",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"ResultTab_Count",
			"ResultTab_Image",
			"ResultTab_JSON",
			"ResultTab_Meta",
			"ResultTab_None",
			"ResultTab_Raw",
			"Result_FailedToOpenRequest",
			"Result_SslProblem",
			"Result_WinHTTPError",
			"TARGET_HAS_THREADING",
			"TIMEOUT_FOREVER",
			"UiHoverableSection_HoverArea",
			"UiHoverableSection_None",
			"UiHoverableSection_Tooltip",
		],
		"custom_functions":
		[
			"#define AlignOffset(pntr, alignment)",
			"#define AllocArray(type, arenaPntr, count)",
			"#define AllocType(type, arenaPntr)",
			"#define Billion(value)",
			"#define BufferPrintAt(level, arrayBuffer, formatString, ...)",
			"#define BufferPrintLineAt(level, arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_D(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_E(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_I(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_N(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_O(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_R(arrayBuffer, formatString, ...)",
			"#define BufferPrintLine_W(arrayBuffer, formatString, ...)",
			"#define BufferPrint_D(arrayBuffer, formatString, ...)",
			"#define BufferPrint_E(arrayBuffer, formatString, ...)",
			"#define BufferPrint_I(arrayBuffer, formatString, ...)",
			"#define BufferPrint_N(arrayBuffer, formatString, ...)",
			"#define BufferPrint_O(arrayBuffer, formatString, ...)",
			"#define BufferPrint_R(arrayBuffer, formatString, ...)",
			"#define BufferPrint_W(arrayBuffer, formatString, ...)",
			"#define CreateTwoPassInnerArena(twoPassStrPntr, arenaPntrName)",
			"#define DeferBlock(endCode)",
			"#define DeferBlockChecked(startCodeAndCondition, endCode)",
			"#define DeferBlockCheckedEx(uniqueName, startCodeAndCondition, endCode)",
			"#define DeferBlockEx(uniqueName, endCode)",
			"#define DeferBlockWithStart(startCode, endCode)",
			"#define DeferBlockWithStartEx(uniqueName, startCode, endCode)",
			"#define DeferIfBlock(startCodeAndCondition, endCode)",
			"#define DeferIfBlockCondEnd(startCodeAndCondition, endCode)",
			"#define DeferIfBlockCondEndEx(uniqueName, startCodeAndCondition, endCode)",
			"#define DeferIfBlockEx(uniqueName, startCodeAndCondition, endCode)",
			"#define DoUiHoverableInterleaved(sectionVarName, context, idStr, preferredTooltipSide)",
			"#define DoUiHoverableSection(sectionVarName, enumValue)",
			"#define FreeArray(type, arenaPntr, count, allocPntr)",
			"#define FreeType(type, arenaPntr, allocPntr)",
			"#define Giga(value)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define IsAlignedTo(pntr, alignment)",
			"#define Kilo(value)",
			"#define LockMutexBlock(mutexPntr, timeout)",
			"#define LockMutexBlockWithTracyZone(zoneName, zoneDisplayStr, mutexPntr, timeout)",
			"#define Mega(value)",
			"#define Million(value)",
			"#define PrintAt(level, formatString, ...)",
			"#define PrintLineAt(level, formatString, ...)",
			"#define PrintLine_D(formatString, ...)",
			"#define PrintLine_E(formatString, ...)",
			"#define PrintLine_I(formatString, ...)",
			"#define PrintLine_N(formatString, ...)",
			"#define PrintLine_O(formatString, ...)",
			"#define PrintLine_R(formatString, ...)",
			"#define PrintLine_W(formatString, ...)",
			"#define Print_D(formatString, ...)",
			"#define Print_E(formatString, ...)",
			"#define Print_I(formatString, ...)",
			"#define Print_N(formatString, ...)",
			"#define Print_O(formatString, ...)",
			"#define Print_R(formatString, ...)",
			"#define Print_W(formatString, ...)",
			"#define Tera(value)",
			"#define Thousand(value)",
			"#define Trillion(value)",
			"#define TwoPassBytes(twoPassStrPntr, numBytes, bytesPntr)",
			"#define TwoPassChar(twoPassStrPntr, character)",
			"#define TwoPassStr(twoPassStrPntr, str8)",
			"#define TwoPassStr8Loop(structName, arenaPntr, addNullTerm)",
			"#define TwoPassStr8LoopEnd(twoPassStrPntr)",
			"#define TwoPassStrNt(twoPassStrPntr, nullTermStr)",
			"#define VarArrayGetIndexOf(type, arrayPntr, itemInQuestion, indexOut)",
			"#define WriteAt(level, message)",
			"#define WriteLineAt(level, message)",
			"#define WriteLine_D(message)",
			"#define WriteLine_E(message)",
			"#define WriteLine_I(message)",
			"#define WriteLine_N(message)",
			"#define WriteLine_O(message)",
			"#define WriteLine_R(message)",
			"#define WriteLine_W(message)",
			"#define Write_D(message)",
			"#define Write_E(message)",
			"#define Write_I(message)",
			"#define Write_N(message)",
			"#define Write_O(message)",
			"#define Write_R(message)",
			"#define Write_W(message)",
			"ClayId ToClayId(Str8 idStr)",
			"ClayId ToClayIdEx(Str8 idStr, uxx index)",
			"ClayId ToClayIdNt(const char* idNullTermString)",
			"ClayId ToClayIdPrint(Arena* arena, const char* formatString, ...)",
			"ClayId ToClayIdPrintEx(Arena* arena, uxx index, const char* formatString, ...)",
			"Clay_RenderCommandArray EndClayUIRender(ClayUI* clay)",
			"Color32 ColorLerpSimple(Color32 start, Color32 end, r32 amount)",
			"Color32 ColorWithAlpha(Color32 rgbColor, r32 alpha)",
			"Color32 ColorWithAlphaU8(Color32 rgbColor, u8 alpha)",
			"Color32 NewColor(u8 red, u8 green, u8 blue, u8 alpha)",
			"Color32 NewColorU32(u32 valueU32)",
			"FontAtlas* GetFontAtlas(PigFont* font, r32 fontSize, u8 styleFlags)",
			"HttpConnection* OsFindHttpConnection(HttpRequestManager* manager, Str8 hostname, u16 portNumber)",
			"HttpRequest* OsMakeHttpRequest(HttpRequestManager* manager, const HttpRequestArgs* args, u64 programTime)",
			"PEXPI void FreeUiLargeText(UiLargeText* text)",
			"PEXPI void FreeUiLargeTextView(UiLargeTextView* tview)",
			"Result OsDoSaveFileDialog(uxx numExtensions, Str8Pair* extensions, uxx defaultExtensionIndex, Arena* arena, FilePath* pathOut)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"Str16 ConvertUtf8StrToUcs2(Arena* arena, Str8 utf8Str, bool addNullTerm)",
			"Str16 NewStr16(uxx length, const void* pntr)",
			"Str16 Str16Lit(const char16_t* nullTermStr)",
			"Str8 AllocStrAndCopy(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"Str8 AllocStrAndCopyNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"Str8 ConvertUcs2StrToUtf8(Arena* arena, Str16 usc2Str, bool addNullTerm)",
			"Str8 EncodeHttpContentUrlStyle(Arena* arena, uxx numItems, const Str8Pair* contentItems, bool addNullTerm)",
			"Str8 EncodeHttpHeaders(Arena* arena, uxx numHeaders, const Str8Pair* headers, bool addNullTerm)",
			"Str8 EscapeString(Arena* arena, Str8 rawString)",
			"Str8 EscapeStringEx(Arena* arena, Str8 rawString, u8 escapeSequences, bool addNullTerm)",
			"Str8 GetUrlHostnamePart(Str8 url)",
			"Str8 GetUrlPathPart(Str8 url)",
			"Str8 GetUrlProtocolPart(Str8 url)",
			"Str8 JoinStringsInArena(Arena* arena, Str8 left, Str8 right, bool addNullTerm)",
			"Str8 JoinStringsInArena3(Arena* arena, Str8 left, Str8 middle, Str8 right, bool addNullTerm)",
			"Str8 JoinStringsInArenaWithChar(Arena* arena, Str8 left, char sepChar, Str8 right, bool addNullTerm)",
			"Str8 NewStr8(uxx length, const void* pntr)",
			"Str8 PrintInArenaStr(Arena* arena, const char* formatString, ...)",
			"Str8 ShortenFilePathToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, FilePath filePath, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextEndToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextStartToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr, uxx ellipsesIndex)",
			"Str8 StrLit(const char* nullTermStr)",
			"Str8 StrReplace(Arena* arena, Str8 str, Str8 target, Str8 replacement, bool addNullTerm)",
			"Str8 StrSlice(Str8 target, uxx startIndex, uxx endIndex)",
			"Str8 StrSliceFrom(Str8 target, uxx startIndex)",
			"Str8 StrSliceFromPntr(Str8 target, const void* startPntr)",
			"Str8 StrSliceLength(Str8 target, uxx startIndex, uxx length)",
			"Str8 StrSliceMaxLength(Str8 target, uxx startIndex, uxx maxLength)",
			"Str8 StrSlicePntrs(Str8 target, const void* startPntr, const void* endPntr)",
			"Str8 ToStr8FromOc(oc_str8 orcaStr)",
			"Str8 TrimLeadingWhitespace(Str8 target)",
			"Str8 TrimLeadingWhitespaceAndNewLines(Str8 target)",
			"Str8 TrimTrailingWhitespace(Str8 target)",
			"Str8 TrimTrailingWhitespaceAndNewLines(Str8 target)",
			"Str8 TrimWhitespace(Str8 target)",
			"Str8 TrimWhitespaceAndNewLines(Str8 target)",
			"Str8 UnescapeString(Arena* arena, Str8 escapedString)",
			"Str8 UnescapeStringEx(Arena* arena, Str8 escapedString, u8 escapeSequences, bool addNullTerm)",
			"Str8Pair NewStr8Pair(Str8 left, Str8 right)",
			"StrErrorList NewStrErrorList(Arena* arena, uxx maxNumErrors)",
			"TextMeasure MeasureRichText(const PigFont* font, r32 wrapWidth, RichStr text)",
			"TextMeasure MeasureRichTextEx(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, RichStr text)",
			"TextMeasure MeasureRichTextFlow(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, RichStr text, FontFlow* flowOut)",
			"TextMeasure MeasureText(const PigFont* font, r32 wrapWidth, Str8 text)",
			"TextMeasure MeasureTextEx(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, Str8 text)",
			"TextMeasure MeasureTextFlow(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, Str8 text, FontFlow* flowOut)",
			"ThreadId OsGetCurrentThreadId()",
			"TwoPassStr8 NewTwoPassStr8(Arena* arena, bool addNullTerm)",
			"UiHoverableSection DoUiHoverable(UiHoverableSection section, UiWidgetContext* context, Str8 idStr, Dir2 preferredTooltipSide)",
			"UiWidgetContext NewUiWidgetContext(Arena* uiArena, ClayUIRenderer* renderer, KeyboardState* keyboard, MouseState* mouse, r32 uiScale, void** focusedUiElementPntr)",
			"bool AreCharsHexidecimal(u64 numChars, char* charsPntr)",
			"bool CanArenaAllocAligned(const Arena* arena)",
			"bool CanArenaCheckPntrFromArena(const Arena* arena)",
			"bool CanArenaFree(const Arena* arena)",
			"bool CanArenaGetSize(const Arena* arena)",
			"bool CanArenaResetToMark(const Arena* arena)",
			"bool CanArenaSoftGrow(const Arena* arena)",
			"bool CanArenaVerifyIntegrity(const Arena* arena)",
			"bool ClayBtnStrEx(Str8 idStr, Str8 btnText, Str8 hotkeyStr, bool isEnabled, bool growWidth, Texture* icon)",
			"bool DoesStrContainMultibyteUtf8Chars(Str8 str)",
			"bool FindNextWhitespaceInStr(Str8 target, uxx startIndex)",
			"bool IsBufferNullTerminated(uxx bufferSize, const void* bufferPntr)",
			"bool IsCharAlphaNumeric(u32 codepoint)",
			"bool IsCharAlphabetic(u32 codepoint)",
			"bool IsCharAnsii(u32 codepoint)",
			"bool IsCharExtendedAnsii(u32 codepoint)",
			"bool IsCharHexadecimal(u32 codepoint)",
			"bool IsCharLowercaseAlphabet(u32 codepoint)",
			"bool IsCharNumeric(u32 codepoint)",
			"bool IsCharPunctuationEnd(u32 codepoint)",
			"bool IsCharPunctuationStart(u32 codepoint)",
			"bool IsCharRenderableAnsii(u32 codepoint)",
			"bool IsCharSlash(u32 codepoint)",
			"bool IsCharSyntax(u32 codepoint)",
			"bool IsCharUppercaseAlphabet(u32 codepoint)",
			"bool IsCharWhitespace(u32 codepoint, bool includeNewLines)",
			"bool IsKeyboardKeyPressed(KeyboardState* keyboard, Key key, bool followOsRepeatedEvent)",
			"bool IsPntrFromArena(const Arena* arena, const void* allocPntr)",
			"bool IsValidIdentifier(uxx strLength, const char* strPntr, bool allowEmpty, bool allowDashes, bool allowSpaces)",
			"bool LockMutex(Mutex* mutexPntr, uxx timeoutMs)",
			"bool LockMutexAndEndTracyZone(Mutex* mutexPntr, uxx timeoutMs, TracyCZoneCtx zone)",
			"bool MemArenaVerifyIntegrity(Arena* arena, bool assertOnFailure)",
			"bool MemArenaVerifyPaddingAround(const Arena* arena, const void* allocPntr, uxx allocSize, bool assertOnFailure)",
			"bool OsIsMainThread()",
			"bool StrAnyCaseContains(Str8 haystack, Str8 needle)",
			"bool StrAnyCaseEndsWith(Str8 target, Str8 suffix)",
			"bool StrAnyCaseEquals(Str8 left, Str8 right)",
			"bool StrAnyCaseEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrAnyCaseStartsWith(Str8 target, Str8 prefix)",
			"bool StrContains(Str8 haystack, Str8 needle, bool caseSensitive)",
			"bool StrEndsWith(Str8 target, Str8 suffix, bool caseSensitive)",
			"bool StrEquals(Str8 left, Str8 right, bool caseSensitive)",
			"bool StrEqualsAt(Str8 left, Str8 right, uxx leftIndex, bool caseSensitive)",
			"bool StrExactContains(Str8 haystack, Str8 needle)",
			"bool StrExactEndsWith(Str8 target, Str8 suffix)",
			"bool StrExactEquals(Str8 left, Str8 right)",
			"bool StrExactEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrExactStartsWith(Str8 target, Str8 prefix)",
			"bool StrStartsWith(Str8 target, Str8 prefix, bool caseSensitive)",
			"bool StrTryAnyCaseFind(Str8 haystack, Str8 needle, uxx* indexOut)",
			"bool StrTryExactFind(Str8 haystack, Str8 needle, uxx* indexOut)",
			"bool StrTryFind(Str8 haystack, Str8 needle, bool caseSensitive, uxx* indexOut)",
			"bool TryParseBool(Str8 str, bool* valueOut, Result* errorOut)",
			"bool TryParseBoolEx(Str8 str, bool* valueOut, Result* errorOut, bool strict)",
			"bool TryParseI16(Str8 str, i16* valueOut, Result* errorOut)",
			"bool TryParseI16Ex(Str8 str, i16* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI32(Str8 str, i32* valueOut, Result* errorOut)",
			"bool TryParseI32Ex(Str8 str, i32* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI64(Str8 str, i64* valueOut, Result* errorOut)",
			"bool TryParseI64Ex(Str8 str, i64* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI8(Str8 str, i8* valueOut, Result* errorOut)",
			"bool TryParseI8Ex(Str8 str, i8* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseR32(Str8 str, r32* valueOut, Result* errorOut)",
			"bool TryParseR32Ex(Str8 str, r32* valueOut, Result* errorOut, bool allowSuffix, bool allowInfinityOrNan)",
			"bool TryParseR64(Str8 str, r64* valueOut, Result* errorOut)",
			"bool TryParseR64Ex(Str8 str, r64* valueOut, Result* errorOut, bool allowInfinityOrNan)",
			"bool TryParseU16(Str8 str, u16* valueOut, Result* errorOut)",
			"bool TryParseU16Ex(Str8 str, u16* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU32(Str8 str, u32* valueOut, Result* errorOut)",
			"bool TryParseU32Ex(Str8 str, u32* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU64(Str8 str, u64* valueOut, Result* errorOut)",
			"bool TryParseU64Ex(Str8 str, u64* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU8(Str8 str, u8* valueOut, Result* errorOut)",
			"bool TryParseU8Ex(Str8 str, u8* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool UpdateBtnState(BtnState* state, u64 currentTime, bool isDown, bool isRepeated)",
			"bool UpdateClayScrolling(ClayUI* clay, r32 elapsedMs, bool isMouseOverOther, v2 mouseScrollDelta, bool allowTouchScrolling)",
			"char GetHexChar(u8 hexValue, bool upperCase)",
			"char ToLowerChar(char c)",
			"char ToUpperChar(char c)",
			"char* AllocAndCopyChars(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"char* AllocAndCopyCharsNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"char* PrintInArena(Arena* arena, const char* formatString, ...)",
			"const char* GetHttpRequestStateStr(HttpRequestState enumValue)",
			"const char* GetHttpVerbStr(HttpVerb enumValue)",
			"const char* GetResultTabStr(ResultTab enumValue)",
			"const char* GetWinHttpErrorStr(DWORD errorCode)",
			"const char* GetWinHttpStatusStr(DWORD status)",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"ixx ClampIXX(ixx value, ixx min, ixx max)",
			"oc_str8 ToOcStr8(Str8 str)",
			"rec GetClayElementDrawRec(ClayId elementId)",
			"rec GetClayElementDrawRecNt(const char* elementIdStrNt)",
			"rec GetClayElementDrawRecStr(Str8 elementIdStr)",
			"u32 CLAY_HASH_TEXT_USERDATA_DEF(u32 currentHash, Clay_TextElementConfig* config)",
			"u32 CharToU32(char c)",
			"u32 HashTextUserData(u32 currentHash, Clay_TextElementConfig* config)",
			"u8 CharToU8(char c)",
			"u8 GetCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"u8 GetHexCharValue(char hexChar)",
			"u8 GetLowerNibble(u8 value)",
			"u8 GetNumericCharValue(char hexChar)",
			"u8 GetPrevCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"u8 GetUpperNibble(u8 value)",
			"uxx ArenaGetMark(Arena* arena)",
			"uxx ArenaSoftGrowBegin(const Arena* arena, const void* allocPntr, uxx allocSize)",
			"uxx ArenaSoftGrowBeginNoSize(const Arena* arena, const void* allocPntr)",
			"uxx ClampUXX(uxx value, uxx min, uxx max)",
			"uxx CombineOverlappingAndConsecutiveRangesUXX(uxx numRanges, RangeUXX* ranges)",
			"uxx FindNextCharInStr(Str8 target, uxx startIndex, Str8 searchCharsStr)",
			"uxx FindNextCharInStrEx(Str8 target, uxx startIndex, Str8 searchCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextUnknownCharInStr(Str8 target, uxx startIndex, Str8 knownCharsStr)",
			"uxx FindNextUnknownCharInStrEx(Str8 target, uxx startIndex, Str8 knownCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextWhitespaceInStrEx(Str8 target, uxx startIndex, bool ignoreCharsInQuotes)",
			"uxx FindWordBoundaryStr(Str8 str, uxx startIndex, bool forward)",
			"uxx GetAllocSize(const Arena* arena, const void* allocPntr)",
			"uxx GetUriErrors(Str8 uriStr, StrErrorList* list)",
			"uxx ShortenTextToFitWidthEx(const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr, uxx ellipsesIndex, Str8* beforeEllipseStrOut, Str8* afterEllipseStrOut)",
			"uxx StrAnyCaseFind(Str8 haystack, Str8 needle)",
			"uxx StrExactFind(Str8 haystack, Str8 needle)",
			"uxx StrFind(Str8 haystack, Str8 needle, bool caseSensitive)",
			"uxx StrFindAfter(Str8 haystack, uxx startIndex, Str8 needle, bool caseSensitive)",
			"uxx UiTextboxFindClosestIndexToPos(UiTextbox* tbox, v2 screenPos)",
			"void AddStrError(StrErrorList* list, RangeUXX range, Str8 errorStr)",
			"void AddStrErrorPrint(StrErrorList* list, RangeUXX range, const char* formatString, ...)",
			"void ArenaResetToMark(Arena* arena, uxx mark)",
			"void ArenaSoftGrowEnd(Arena* arena, void* allocPntr, uxx allocSize, uxx newSpaceUsed)",
			"void ArenaSoftGrowEndNoSize(Arena* arena, void* allocPntr, uxx newSpaceUsed)",
			"void BeginClayUIRender(ClayUI* clay, v2 windowSize, bool isMouseOverOther, v2 mousePos, bool isMouseDown)",
			"void DEBUG_OUTPUT_HANDLER_DEF(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel level, bool newLine, const char* message)",
			"void DEBUG_PRINT_HANDLER_DEF(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel level, bool newLine, uxx printBufferLength, char* printBuffer, const char* formatString, ...)",
			"void DestroyMutex(Mutex* mutexPntr)",
			"void DoUiCheckbox(UiWidgetContext* context, Str8 idStr, bool* isChecked, r32 boxSize, Texture* checkboxTexture, Str8 label, Dir2 labelSide, PigFont* font, r32 fontSize, u8 fontStyle)",
			"void DoUiLargeTextView(UiWidgetContext* context, UiLargeTextView* tview, Clay_SizingAxis viewWidth, Clay_SizingAxis viewHeight, UiLargeText* text, PigFont* font, r32 fontSize, u8 fontStyle)",
			"void DoUiListView(UiWidgetContext* context, UiListView* list, Clay_SizingAxis listWidth, Clay_SizingAxis listHeight, u16 itemGap, uxx numItems, UiListViewItem* items)",
			"void DoUiTextbox(UiWidgetContext* context, UiTextbox* tbox, PigFont* font, u8 fontStyle, r32 fontSize, r32 uiScale)",
			"void FreeHttpRequestManager(HttpRequestManager* manager)",
			"void FreeMem(Arena* arena, void* allocPntr, uxx allocSize)",
			"void FreeMemAligned(Arena* arena, void* allocPntr, uxx allocSize, uxx alignmentOverride)",
			"void FreeMemNoSize(Arena* arena, void* allocPntr)",
			"void FreeStr8(Arena* arena, Str8* stringPntr)",
			"void FreeStr8WithNt(Arena* arena, Str8* stringPntr)",
			"void FreeStrErrorList(StrErrorList* list)",
			"void FreeUiTextbox(UiTextbox* tbox)",
			"void HTTP_CALLBACK_DEF(plex HttpRequest* request)",
			"void InitArenaAlias(Arena* arenaOut, Arena* sourceArena)",
			"void InitArenaBuffer(Arena* arenaOut, void* bufferPntr, uxx bufferSize)",
			"void InitArenaFuncs(Arena* arenaOut, AllocFunc_f* allocFunc, FreeFunc_f* freeFunc, ReallocFunc_f* reallocFunc)",
			"void InitArenaStack(Arena* arenaOut, uxx stackSize, Arena* sourceArena)",
			"void InitArenaStackVirtual(Arena* arenaOut, uxx virtualSize)",
			"void InitArenaStackWasm(Arena* arenaOut)",
			"void InitArenaStdHeap(Arena* arenaOut)",
			"void InitClayUI(Arena* arena, v2 windowSize, ClayMeasureText_f* measureTextFunc, void* measureUserData, ClayUI* clayOut)",
			"void InitMutex(Mutex* mutexPntr)",
			"void InitUiLargeText(Arena* arena, Str8 textStr, UiLargeText* text)",
			"void InitUiLargeTextView(Arena* arena, Str8 idStr, UiLargeTextView* tview)",
			"void InitUiTextbox(Arena* arena, Str8 idStr, Str8 initialText, UiTextbox* tbox)",
			"void OsCopyHttpRequestArgs(Arena* arena, HttpRequestArgs* dest, const HttpRequestArgs* source)",
			"void OsFreeHttpRequestManager(HttpRequestManager* manager)",
			"void OsInitHttpRequestManager(Arena* arena, HttpRequestManager* manager)",
			"void OsUpdateHttpRequestManager(HttpRequestManager* manager)",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void ResetFontFlowInfo(FontFlow* flow)",
			"void SetClayContext(ClayUI* clay)",
			"void TwoPassPrint(TwoPassStr8* twoPassStrPntr, const char* formatString, ...)",
			"void UiTextboxAddSyntaxRange(UiTextbox* tbox, RangeUXX range, RichStrStyleChange style)",
			"void UiTextboxDeleteBytes(UiTextbox* tbox, uxx startIndex, uxx numBytes)",
			"void UiTextboxDeleteSelected(UiTextbox* tbox)",
			"void UiTextboxSelectAll(UiTextbox* tbox)",
			"void UnlockMutex(Mutex* mutexPntr)",
			"void UpdateKeyboardKey(KeyboardState* keyboard, u64 currentTime, Key key, bool pressed, bool isRepeat)",
			"void WinHttpStatusCallback(HINTERNET handle, DWORD_PTR context, DWORD status, LPVOID infoPntr, DWORD infoLength)",
			"void* AllocMem(Arena* arena, uxx numBytes)",
			"void* AllocMemAligned(Arena* arena, uxx numBytes, uxx alignmentOverride)",
			"void* ReallocMem(Arena* arena, void* allocPntr, uxx oldSize, uxx newSize)",
			"void* ReallocMemAligned(Arena* arena, void* allocPntr, uxx oldSize, uxx oldAlignmentOverride, uxx newSize, uxx newAlignmentOverride)",
			"void* ReallocMemNoOldSize(Arena* arena, void* allocPntr, uxx newSize)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"ClayHashTextUserData_f",
			"DebugOutput_f",
			"DebugPrint_f",
			"HistoryItem",
			"HttpCallback_f",
			"HttpConnection",
			"HttpRequestArgs",
			"HttpRequestManager",
			"HttpRequestState",
			"HttpVerb",
			"Mutex",
			"OsDll",
			"ResultTab",
			"StrError",
			"StrErrorList",
			"TwoPassStr8",
			"UiCheckbox",
			"UiHoverableSection",
			"UiLargeText",
			"UiLargeTextLine",
			"UiLargeTextView",
			"UiTextbox",
			"UiWidgetContext",
		],
	},
}
