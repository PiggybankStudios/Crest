{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
				"build_script.c",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"COPY_TO_DATA_DIRECTORY",
			"HttpVerb_Count",
			"HttpVerb_DELETE",
			"HttpVerb_GET",
			"HttpVerb_None",
			"HttpVerb_POST",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"ResultTab_Count",
			"ResultTab_Image",
			"ResultTab_JSON",
			"ResultTab_Meta",
			"ResultTab_None",
			"ResultTab_Raw",
		],
		"custom_functions":
		[
			"FontAtlas* GetFontAtlas(PigFont* font, r32 fontSize, u8 styleFlags)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"const char* GetHttpVerbStr(HttpVerb enumValue)",
			"const char* GetResultTabStr(ResultTab enumValue)",
			"uxx FindStr8PairInArray(VarArray* array, Str8 key)",
			"uxx UiTextboxFindClosestIndexToPos(UiTextbox* tbox, v2 screenPos)",
			"void DoUiListView(UiListView* list, ClayUIRenderer* renderer, Arena* uiArena, KeyboardState* keyboard, MouseState* mouse, Clay_SizingAxis listWidth, Clay_SizingAxis listHeight, u16 itemGap, uxx numItems, UiListViewItem* items, PigFont* font, u8 fontStyle, r32 fontSize, r32 uiScale)",
			"void DoUiTextbox(UiTextbox* tbox, ClayUIRenderer* renderer, Arena* uiArena, const KeyboardState* keyboard, const MouseState* mouse, UiTextbox** focusedTextbox, PigFont* font, u8 fontStyle, r32 fontSize, r32 uiScale)",
			"void FreeUiListView(UiListView* list)",
			"void FreeUiTextbox(UiTextbox* tbox)",
			"void InitUiListView(Arena* arena, Str8 idStr, UiListView* list)",
			"void InitUiTextbox(Arena* arena, Str8 idStr, Str8 initialText, UiTextbox* tbox)",
			"void ResetFontFlowInfo(FontFlow* flow)",
			"void UI_LIST_VIEW_ITEM_RENDER_DEF(UiListView* list, void* item, uxx index, bool isSelected, bool isHovered)",
			"void UiTextboxClear(UiTextbox* tbox)",
			"void UiTextboxDeleteBytes(UiTextbox* tbox, uxx startIndex, uxx numBytes)",
			"void UiTextboxDeleteSelected(UiTextbox* tbox)",
			"void UiTextboxSelectAll(UiTextbox* tbox)",
			"void UiTextboxSetText(UiTextbox* tbox, Str8 text)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"HistoryItem",
			"HttpVerb",
			"OsDll",
			"ResultTab",
			"UiListView",
			"UiListViewItem",
			"UiListViewItemRender_f",
		],
	},
}
